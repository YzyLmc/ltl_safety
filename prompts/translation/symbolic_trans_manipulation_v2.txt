Your task is to translate English utterances into linear temporal logic (LTL) formulas. LTL is a formal language that has been used for describing temporal task specifications. It consists of propositions and operators. In the following task, here are the propositions and operators we use:
Propositions: {"A", "B", "C", "D"}
Operators: {"G": "Globally", "!": "Not", "X": "Next", "W": "Weak Until", "U": "Until", "i": "Indicate", "&": "And", "F":"Finally"}
Predicates: {agent_at(), is_switchedon(), is_open(), is_grabbed(), is_touched(), is_on(), is_in()}

Utterance: never go to A
LTL: G ! agent_at(A)

Utterance: don't turn on A
LTL: G ! is_switchedon(A)

Utterance: please do not pick up A
LTL: G ! is_grabbed(A)

Utterance: never put A on B
LTL: G ! is_on(A,B)

Utterance: don't go to B until you go to A
LTL: W ! agent_at(B) agent_at(A)

Utterance: you can't go to B if you haven't picked up A
LTL: W ! is_grabbed(A) agent_at(B)

Utterance: pick up A before going to B
LTL: W ! agent_at(B) is_grabbed(A)

Utterance: you cannot put A on B before grab C
LTL: W ! is_on(A,B) is_grabbed(C)

Utterance: don't put A in B if you haven't been to C
LTL: W ! is_in(A,B) agent_at(C)

Utterance: if you  open A, you can never open B after that
LTL: G i is_open(A) G ! is_open(B)

Utterance: pick up A means you can never go to B afterward
LTL: G i is_grabbed(A) G ! agent_at(B)

Utterance: don't touch A if you have been in B
LTL: G i agent_at(B) G ! is_touched(A)

Utterance: picking up A implies you have to go to B in the future
LTL: G i is_grabbed(A) F agent_at(B)

Utterance: if you switch on A, you have to switch it off later
LTL: G i is_switchedon(A) F ! is_switchedon(A)

Utterance: you can grab A, you have to leave B at some point in the future
LTL: G i is_grabbed(A) F ! agent_at(B)

Utterance: if you hold A, you have to go to B right after that
LTL: G i is_grabbed(A) X agent_at(B)

Utterance: entering A means you have to close B immediately 
LTL: G i agent_at(A) X ! is_open(B)

Utterance: once you reach A you are never allowed to visit it again
LTL: ! F & agent_at(A) U agent_at(A) & ! agent_at(A) U ! agent_at(A) F agent_at(A)

Utterance: you can open A at most twice
LTL: ! F & is_open(A) U is_open(A) & ! is_open(A) U ! is_open(A) F & is_open(A) U is_open(A) & ! is_open(A) U ! is_open(A) F is_open(A)

Utterance: passing through A thrice will lock it for future visits
LTL: ! F & agent_at(A) U agent_at(A) & ! agent_at(A) U ! agent_at(A) F & agent_at(A) U agent_at(A) & ! agent_at(A) U ! agent_at(A) F & agent_at(A) U agent_at(A) & ! agent_at(A) U ! agent_at(A) F agent_at(A)

Utterance: 